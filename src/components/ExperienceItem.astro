---
interface Props {
  company: string;
  role: string;
  period: string;
  location: string;
  type: string;
  description: string;
  achievements: string[];
  keyMetrics: {
    [key: string]: string;
  };
  skills: string[];
  isLatest?: boolean;
  dict?: any;
}

const {
  company,
  role,
  period,
  location,
  type,
  description,
  achievements,
  keyMetrics,
  skills,
  isLatest,
  dict,
} = Astro.props;

// Textos traducibles con fallbacks
const currentLabel = dict?.experience?.currentLabel || "Actual";
const achievementsLabel =
  dict?.experience?.achievementsLabel || "Logros Clave:";
const technologiesLabel = dict?.experience?.technologiesLabel || "Tecnologías:";
---

<div
  class="relative bg-gray-900/50 backdrop-blur-sm border border-gray-700/50 rounded-xl p-6 hover:bg-gray-800/50 transition-all duration-300 group"
>
  <!-- Timeline dot -->
  <div
    class="absolute -left-10 top-6 w-4 h-4 bg-gradient-to-r from-blue-400 to-blue-600 rounded-full border-4 border-gray-900 group-hover:scale-110 transition-transform duration-300"
  >
  </div>

  <!-- Header -->
  <div class="flex flex-col md:flex-row md:items-start md:justify-between mb-4">
    <div class="flex-1">
      <div class="flex items-center gap-2 mb-1">
        <h3
          class="text-xl font-bold text-yellow-200 group-hover:text-yellow-100 transition-colors"
        >
          {role}
        </h3>
        {
          isLatest && (
            <span class="bg-gradient-to-r from-blue-500 to-blue-600 text-white text-xs font-medium px-2 py-1 rounded-full">
              {currentLabel}
            </span>
          )
        }
      </div>

      <div class="text-lg font-semibold text-blue-300 mb-1">
        {company}
      </div>

      <div
        class="flex flex-col sm:flex-row sm:items-center gap-2 text-sm text-gray-400 mb-2"
      >
        <span class="flex items-center gap-1">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path
              fill-rule="evenodd"
              d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z"
              clip-rule="evenodd"></path>
          </svg>
          {period}
        </span>
        <span class="hidden sm:block text-gray-600">•</span>
        <span class="flex items-center gap-1">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path
              fill-rule="evenodd"
              d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z"
              clip-rule="evenodd"></path>
          </svg>
          {location}
        </span>
        <span class="hidden sm:block text-gray-600">•</span>
        <span class="bg-gray-700 text-gray-300 px-2 py-1 rounded text-xs">
          {type}
        </span>
      </div>
    </div>

    <!-- Key Metrics -->
    <div class="flex flex-wrap gap-2 mt-3 md:mt-0">
      {
        Object.entries(keyMetrics).map(([key, value]) => (
          <div class="bg-gradient-to-r from-green-600/20 to-green-500/20 border border-green-500/30 rounded-lg px-3 py-1">
            <div class="text-green-400 font-bold text-sm">{value}</div>
            <div class="text-green-300 text-xs capitalize">{key}</div>
          </div>
        ))
      }
    </div>
  </div>

  <!-- Description -->
  <p class="text-gray-200 mb-4 leading-relaxed">
    {description}
  </p>

  <!-- Achievements -->
  <div class="mb-4">
    <h4 class="text-sm font-semibold text-sky-300 mb-2">{achievementsLabel}</h4>
    <ul class="space-y-2">
      {
        achievements.map((achievement) => (
          <li class="flex items-start gap-2 text-sm text-gray-300">
            <div class="w-1.5 h-1.5 rounded-full bg-blue-400 mt-2 flex-shrink-0" />
            <span set:html={achievement} />
          </li>
        ))
      }
    </ul>
  </div>

  <!-- Skills -->
  <div>
    <h4 class="text-sm font-semibold text-sky-300 mb-2">{technologiesLabel}</h4>
    <div class="flex flex-wrap gap-2">
      {
        skills.map((skill) => (
          <span class="bg-gray-700/70 hover:bg-gray-600/70 border border-gray-600 text-gray-200 px-3 py-1 rounded-full text-xs font-medium transition-colors duration-200 hover:border-blue-500/50">
            {skill}
          </span>
        ))
      }
    </div>
  </div>
</div>
